plugins {
    id 'multiloader-loader'
    id 'net.neoforged.moddev.legacyforge'
}

legacyForge {
    version = "${minecraft_version}-${forge_version}"

    validateAccessTransformers = true

    def at = project(':common').file('src/main/resources/META-INF/accesstransformer.cfg')
    if (at.exists()) {
        accessTransformers = ["src/main/resources/META-INF/accesstransformer.cfg"]
    }
    parchment {
        minecraftVersion = parchment_minecraft
        mappingsVersion = parchment_version
    }
    runs {
        client {
            client()
        }
        data {
            data()
            programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
        }
        server {
            server()
        }
    }

    mods {
        "${mod_id}" {
            sourceSet sourceSets.main
        }
    }
}

sourceSets.main.resources.srcDir 'src/generated/resources'

repositories {
    maven {
        url = "https://api.modrinth.com/maven"
    }
}

dependencies {
    compileOnly project(":common")
    annotationProcessor("org.spongepowered:mixin:0.8.5-SNAPSHOT:processor")
    modRuntimeOnly("maven.modrinth:architectury-api:1MKTLiiG")
    modRuntimeOnly("maven.modrinth:yacl:3.6.6+1.20.1-forge")
    modRuntimeOnly("maven.modrinth:fusion-connected-textures:1.1.1-forge-mc1.20.1")
    modRuntimeOnly("maven.modrinth:armor-of-the-ages:1.3.5-forge")
    modRuntimeOnly("maven.modrinth:dawn-of-time:1.5.15-forge")
}
